Introduction 

What is Spring Boot?

Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can just run.

Why Spring Boot ?

The core Spring framework already reduces boilerplate code and provides a lot of helpful features for Java applications.

However, Spring Boot takes this convenience to the next level by focusing specifically on reducing the effort required to set up and configure a Spring application.

@SpringBootApplication
======================

We use the @SpringBootApplication annotation on the main class. This single annotation replaces the need for setting up a manual Spring application context.

AnnotationConfigApplicationContex
==================================

We no longer need to explicitly create an application context using AnnotationConfigApplicationContext as Spring Boot handles that behind the scenes.

We use SpringApplication.run() to startthe application, and Spring Boot takes care of configuring the embedded web server and other necessarv componaats.

in spring boot we are having beans , beans which can be access by applicationContext, when we say IOC inversion of control means the spring boot container will taking care of lifecycle of an object so the spring boot context is use to access and interact with beans and configuration.


In Simple Terms:
Container: The core engine that builds and manages your beans.
Context: The interface you use to access and interact with those beans and configurations.
Key Difference:

The container does the actual work of creating and managing beans.
The context helps you access and manage beans and the configuration.

Maven command :
=============

mvn validate
mvn test
mvn package*
mvn install
mvn clean

IOC container
=============
IOC container is have inside many classes and objects
Application contexts which implement the IOC container or also it is the way to achieve IOC container
 
@Component
===========
class is automatically registered as a spring bean

if any class is having @Component then IOC container will store this class

so if IOC container is stored any object, called it as Bean.

@SpringBootAppliaction
======================
combination of @Configuration, @EnableAutoConfiguration, @ComponentScan

@Configuration
==============
@Configuration annotation in Spring is a class-level annotation that indicates a class is a source of bean definitions


@EnableAutoConfiguration
========================= 
Enable auto-configuration of the Spring Application Context, attempting to guess and configure beans that you are likely to need. Auto-configuration classes are usually applied based on your classpath and what beans you have defined. 

For example, if you have tomcat-embedded.jar on your classpath you are likely to want a TomcatServletWebServerFactory (unless you have defined your own ServletWebServerFactory bean).

 

@ComponentScan - package scanning, @Component
=============================================
With Spring, we use the @ComponentScan annotation along with the @Configuration annotation to specify the packages that we want to be scanned. @ComponentScan without arguments tells Spring to scan the current package and all of its sub-packages.

Letâ€™s say we have the following @Configuration in com.baeldung.componentscan.springapp package:



@Autowired - field dependency injections
==========
we do dependency injection by using auto wired annotation..

@Autowired is one of the core annotations in Spring, used for automatic dependency injection. In simpler terms, it allows Spring to automatically wire the required beans (dependencies) into your classes, eliminating the need for manual configuration.

REST API's  Representational estate transfer , Application programming Interfaces 


@RestController
===============
A REST Controller in Spring Boot is a specialized controller that's used to create RESTful web services. It's annotated with the @RestController annotation, which is a combination of the @Controller and @ResponseBody annotations. 


ORM (Object Relation Mapping)
=============================
ORM is a technique used to map Java objects to database tables.

It allows developers to work with databases using object-oriented programming concepts, making it easier to interact with relational databases.

JPA (Java Persistence API)
==========================

A way to achieve ORM, includes interfaces and annotations that you use in your Java classes, requires a persistence provider (ORM tools) for implementation.

Spring Data JPA
===============
Spring Data JPA is built on top of the JPA (Java
Persistence API) specification, but it is not a JPA
implementation itself. Instead, it simplifies
working with JPA by providing higher-level
abstractions and utilities. However, to use Spring
Data JPA effectively, you still need a JPA
implementation, such as Hibernate, EclipseLink,
or another JPA-compliant provider, to handle the
actual database interactions.

Query & Criteria
================
Query Method DSL is a simple and convenient
way to create queries based on method naming
conventions, while the Criteria API offers a more
dynamic and programmatic approach for
building complex and custom queries



Controller -> Service -> repository 










